// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceB_DoSomething_FullMethodName = "/services.ServiceB/DoSomething"
)

// ServiceBClient is the client API for ServiceB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceBClient interface {
	DoSomething(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceBClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBClient(cc grpc.ClientConnInterface) ServiceBClient {
	return &serviceBClient{cc}
}

func (c *serviceBClient) DoSomething(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceB_DoSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBServer is the server API for ServiceB service.
// All implementations must embed UnimplementedServiceBServer
// for forward compatibility.
type ServiceBServer interface {
	DoSomething(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedServiceBServer()
}

// UnimplementedServiceBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceBServer struct{}

func (UnimplementedServiceBServer) DoSomething(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSomething not implemented")
}
func (UnimplementedServiceBServer) mustEmbedUnimplementedServiceBServer() {}
func (UnimplementedServiceBServer) testEmbeddedByValue()                  {}

// UnsafeServiceBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBServer will
// result in compilation errors.
type UnsafeServiceBServer interface {
	mustEmbedUnimplementedServiceBServer()
}

func RegisterServiceBServer(s grpc.ServiceRegistrar, srv ServiceBServer) {
	// If the following call pancis, it indicates UnimplementedServiceBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceB_ServiceDesc, srv)
}

func _ServiceB_DoSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).DoSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceB_DoSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).DoSomething(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceB_ServiceDesc is the grpc.ServiceDesc for ServiceB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ServiceB",
	HandlerType: (*ServiceBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomething",
			Handler:    _ServiceB_DoSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}

const (
	ServiceC_DoSomethingElse_FullMethodName = "/services.ServiceC/DoSomethingElse"
)

// ServiceCClient is the client API for ServiceC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceCClient interface {
	DoSomethingElse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCClient(cc grpc.ClientConnInterface) ServiceCClient {
	return &serviceCClient{cc}
}

func (c *serviceCClient) DoSomethingElse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceC_DoSomethingElse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCServer is the server API for ServiceC service.
// All implementations must embed UnimplementedServiceCServer
// for forward compatibility.
type ServiceCServer interface {
	DoSomethingElse(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedServiceCServer()
}

// UnimplementedServiceCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceCServer struct{}

func (UnimplementedServiceCServer) DoSomethingElse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSomethingElse not implemented")
}
func (UnimplementedServiceCServer) mustEmbedUnimplementedServiceCServer() {}
func (UnimplementedServiceCServer) testEmbeddedByValue()                  {}

// UnsafeServiceCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCServer will
// result in compilation errors.
type UnsafeServiceCServer interface {
	mustEmbedUnimplementedServiceCServer()
}

func RegisterServiceCServer(s grpc.ServiceRegistrar, srv ServiceCServer) {
	// If the following call pancis, it indicates UnimplementedServiceCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceC_ServiceDesc, srv)
}

func _ServiceC_DoSomethingElse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCServer).DoSomethingElse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceC_DoSomethingElse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCServer).DoSomethingElse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceC_ServiceDesc is the grpc.ServiceDesc for ServiceC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ServiceC",
	HandlerType: (*ServiceCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomethingElse",
			Handler:    _ServiceC_DoSomethingElse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}
